generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model customer {
    id               Int               @id @default(autoincrement())
    name             String
    businessName     String
    customerCategory CUSTOMER_CATEGORY @default(LOW)
    isBanned         Boolean           @default(false)
    email            String
    phone            String            @unique
    password         String
    wallet           wallet?
    gstNumber        String?
    address          address?

    orders order[]

    referenceId Int?
    references  customer[] @relation("reference")
    referedBy   customer?  @relation("reference", fields: [referenceId], references: [id])

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    attachments  attachment[]
    orderComment orderComment[]
}

model wallet {
    id           Int           @id @default(autoincrement())
    customerId   Int           @unique
    balance      Float         @default(0)
    transactions transaction[]
    customer     customer      @relation(fields: [customerId], references: [id])
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model transaction {
    id          Int              @id @default(autoincrement())
    walletId    Int
    amount      Float
    type        TRANSACTION_TYPE
    description String
    createBy    Int
    wallet      wallet           @relation(fields: [walletId], references: [id])
    staff       staff            @relation(fields: [createBy], references: [id])
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
}

model address {
    id         Int    @id @default(autoincrement())
    customerId Int    @unique
    line       String
    pinCode    String
    cityId     Int

    customer  customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    city      city     @relation(fields: [cityId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model country {
    id     Int     @id @default(autoincrement())
    name   String
    states state[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model state {
    id        Int    @id @default(autoincrement())
    countryId Int
    name      String
    cities    city[]

    country   country  @relation(fields: [countryId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model city {
    id        Int       @id @default(autoincrement())
    stateId   Int
    name      String
    addresses address[]

    state     state    @relation(fields: [stateId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model productCategory {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    imageUrl    String
    isAvailable Boolean @default(false)

    products              product[]
    productAttributeTypes productAttributeType[]

    parentCategoryId Int? // For subcategories parent category id
    subCategories    productCategory[] @relation("SubCategories")
    parentCategory   productCategory?  @relation("SubCategories", fields: [parentCategoryId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model product {
    id           Int           @id @default(autoincrement())
    name         String
    description  String
    imageUrl     String[]
    categoryId   Int
    isAvailable  Boolean       @default(false)
    sku          String        @unique
    minQty       Int
    ogPrice      Int
    minPrice     Int
    avgPrice     Int
    maxPrice     Int
    productItems productItem[]

    category  productCategory @relation(fields: [categoryId], references: [id])
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
}

model productItem {
    id                      Int                     @id @default(autoincrement())
    productId               Int
    sku                     String
    minQty                  Int
    ogPrice                 Int
    minPrice                Int
    avgPrice                Int
    maxPrice                Int
    imageUrl                String[]
    isAvailable             Boolean                 @default(false)
    productAttributeOptions productAttributeValue[]
    orders                  order[]

    product   product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model productAttributeValue {
    id                     Int           @id @default(autoincrement())
    productItems           productItem[]
    productAttributeTypeId Int
    productAttributeValue  String

    productAttributeType productAttributeType @relation(fields: [productAttributeTypeId], references: [id], onDelete: Cascade)
    createdAt            DateTime             @default(now())
    updatedAt            DateTime             @updatedAt
}

model productAttributeType {
    id                      Int                     @id @default(autoincrement())
    name                    String
    productAttributeOptions productAttributeValue[]

    productCategoryId Int
    productCategory   productCategory @relation(fields: [productCategoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model order {
    id            Int    @id @default(autoincrement())
    customerId    Int
    productItemId Int
    qty           Int
    igst          Float
    uploadCharge  Float
    price         Float
    total         Float
    status        STATUS @default(PENDING)

    attachment attachment?
    comments   orderComment[]

    jobId Int?
    job   job? @relation(fields: [jobId], references: [id], onDelete: SetNull)

    productItem productItem @relation(fields: [productItemId], references: [id], onDelete: Restrict)
    customer    customer    @relation(fields: [customerId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model orderComment {
    id          Int          @id @default(autoincrement())
    orderId     Int
    comment     String
    commentType COMMENT_TYPE
    createdById Int? // Could be either staff or customer
    staffId     Int?
    customerId  Int?

    order     order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
    staff     staff?    @relation(fields: [staffId], references: [id])
    customer  customer? @relation(fields: [customerId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model attachment {
    id           Int       @id @default(autoincrement())
    orderId      Int       @unique
    uploadVia    UPLOADVIA
    urls         String[]
    uploadedById Int?
    uploadedBy   staff?    @relation(fields: [uploadedById], references: [id])
    order        order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    customer     customer? @relation(fields: [customerId], references: [id])
    customerId   Int?
}

model staff {
    id            Int            @id @default(autoincrement())
    name          String
    email         String
    phone         String         @unique
    role          ROLE           @default(STAFF)
    isBanned      Boolean        @default(false)
    password      String
    assignedTasks task[]
    jobVerified   job[]
    transactions  transaction[]
    attachments   attachment[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    orderComment  orderComment[]
}

model job {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    orders      order[]
    isVerified  Boolean   @default(false)
    isCompleted Boolean   @default(false)
    verifiedBy  Int?
    staff       staff?    @relation(fields: [verifiedBy], references: [id], onDelete: Restrict)
    tasks       task[]
    verifiedAt  DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([name])
    @@index([id])
}

model task {
    id              Int         @id @default(autoincrement())
    jobId           Int
    taskTypeId      Int
    assignedStaffId Int?
    status          TASK_STATUS @default(PENDING)

    startedAt   DateTime?
    completedAt DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    assignee staff?   @relation(fields: [assignedStaffId], references: [id], onDelete: Restrict)
    taskType taskType @relation(fields: [taskTypeId], references: [id], onDelete: Restrict)
    job      job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model taskType {
    id          Int    @id @default(autoincrement())
    name        String @unique
    description String
    tasks       task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UPLOADVIA {
    EMAIL
    UPLOAD
}

enum TASK_STATUS {
    PENDING
    IN_PROGRESS
    COMPLETED
}

enum ROLE {
    ADMIN
    PRODUCT_MANAGER
    ORDER_MANAGER
    JOB_MANAGER
    DISPATCHER
    ACCOUNTANT
    STAFF
}

enum CUSTOMER_CATEGORY {
    LOW
    MEDIUM
    HIGH
}

enum TRANSACTION_TYPE {
    DEBIT
    CREDIT
}

enum STATUS {
    PENDING
    PROCESSING
    DISPATCHED
    CANCELLED
    IMPROPER_ORDER
}

enum COMMENT_TYPE {
    CANCELLATION
    IMPROPER_ORDER
    GENERAL
    CUSTOMER_QUERY
    STAFF_NOTE
}
