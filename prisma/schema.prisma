generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model customer {
    id                Int               @id @default(autoincrement())
    name              String
    business_name     String
    customer_category CUSTOMER_CATEGORY @default(LOW)
    is_Banned         Boolean           @default(false)
    email             String
    phone             String            @unique
    password          String

    gst_number String?
    address    address?

    orders order[]

    reference_id Int?
    references   customer[] @relation("reference")
    refered_by   customer?  @relation("reference", fields: [reference_id], references: [id])

    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    customerId Int?
}

model address {
    id          Int @id @default(autoincrement())
    customer_id Int @unique

    line     String
    pin_code String
    city_id  Int

    customer  customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
    city      city     @relation(fields: [city_id], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model country {
    id     Int     @id @default(autoincrement())
    name   String
    states state[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model state {
    id         Int    @id @default(autoincrement())
    country_id Int
    name       String
    cities     city[]

    country   country  @relation(fields: [country_id], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model city {
    id        Int       @id @default(autoincrement())
    state_id  Int
    name      String
    addresses address[]

    state     state    @relation(fields: [state_id], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model product_category {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    image_url   String

    products                product[]
    product_attribute_types product_attribute_type[]

    parent_category_id Int? // For subcategories parent category id
    sub_categories     product_category[] @relation("SubCategories")
    parent_category    product_category?  @relation("SubCategories", fields: [parent_category_id], references: [id], onDelete: Restrict)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model product {
    id            Int            @id @default(autoincrement())
    name          String
    description   String
    image_url     String[]
    category_id   Int
    available     Boolean        @default(false)
    product_items product_item[]

    category  product_category @relation(fields: [category_id], references: [id])
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
}

model product_item {
    id              Int                        @id @default(autoincrement())
    product_code    String
    product_id      Int
    min_qty         Int
    min_price       Int
    avg_price       Int
    max_price       Int
    product_options product_attribute_option[]
    orders          order[]

    product   product  @relation(fields: [product_id], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model product_attribute_option {
    id                             Int    @id @default(autoincrement())
    product_item_id                Int
    product_attribute_type_id      Int
    product_attribure_option_value String

    order_id               Int?
    product_item           product_item           @relation(fields: [product_item_id], references: [id])
    product_attribute_type product_attribute_type @relation(fields: [product_attribute_type_id], references: [id])
    order                  order?                 @relation(fields: [order_id], references: [id])
    createdAt              DateTime               @default(now())
    updatedAt              DateTime               @updatedAt
}

model product_attribute_type {
    id                        Int                        @id @default(autoincrement())
    name                      String
    product_attribute_options product_attribute_option[]

    product_category_id Int
    product_category    product_category @relation(fields: [product_category_id], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model order {
    id                        Int                        @id @default(autoincrement())
    customer_id               Int
    product_item_id           Int
    qty                       Int
    product_attribute_options product_attribute_option[]
    amount                    Int
    paid_amount               Int
    status                    STATUS                     @default(PENDING)
    process                   task[]

    product_item product_item @relation(fields: [product_item_id], references: [id])
    customer     customer     @relation(fields: [customer_id], references: [id])
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
}

model staff {
    id       Int    @id @default(autoincrement())
    name     String
    email    String
    phone    String @unique
    role     ROLE   @default(STAFF)
    password String
    tasks    task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model task {
    id           Int @id @default(autoincrement())
    task_type_id Int
    order_id     Int
    staff_id     Int

    is_completed    Boolean  @default(false)
    assigned_date   DateTime @default(now())
    completed_daate DateTime

    order     order     @relation(fields: [order_id], references: [id])
    staff     staff     @relation(fields: [staff_id], references: [id], onDelete: Restrict)
    task_type task_type @relation(fields: [task_type_id], references: [id], onDelete: Restrict)
}

model task_type {
    id          Int    @id @default(autoincrement())
    name        String
    description String

    tasks     task[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ROLE {
    ADMIN
    PRODUCT_MANAGER
    ORDER_MANAGER
    ACCOUNTANT
    STAFF
}

enum CUSTOMER_CATEGORY {
    LOW
    MEDIUM
    HIGH
}

enum STATUS {
    PENDING
    PROCESSING
    DISPATCHED
    CANCELLED
}
