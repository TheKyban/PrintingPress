generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model customer {
    id               Int               @id @default(autoincrement())
    name             String
    businessName     String
    customerCategory CUSTOMER_CATEGORY @default(LOW)
    isBanned         Boolean           @default(false)
    email            String
    phone            String            @unique
    password         String

    gstNumber String?
    address   address?

    orders order[]

    referenceId Int?
    references  customer[] @relation("reference")
    referedBy   customer?  @relation("reference", fields: [referenceId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model address {
    id         Int    @id @default(autoincrement())
    customerId Int    @unique
    line       String
    pinCode    String
    cityId     Int

    customer  customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    city      city     @relation(fields: [cityId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model country {
    id     Int     @id @default(autoincrement())
    name   String
    states state[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model state {
    id        Int    @id @default(autoincrement())
    countryId Int
    name      String
    cities    city[]

    country   country  @relation(fields: [countryId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model city {
    id        Int       @id @default(autoincrement())
    stateId   Int
    name      String
    addresses address[]

    state     state    @relation(fields: [stateId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model productCategory {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    imageUrl    String

    products              product[]
    productAttributeTypes productAttributeType[]

    parentCategoryId Int? // For subcategories parent category id
    subCategories    productCategory[] @relation("SubCategories")
    parentCategory   productCategory?  @relation("SubCategories", fields: [parentCategoryId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model product {
    id           Int           @id @default(autoincrement())
    name         String
    description  String
    imageUrl     String[]
    categoryId   Int
    isAvailable  Boolean       @default(false)
    sku          String        @unique
    minQty       Int
    ogPrice      Int
    minPrice    Int
    avgPrice     Int
    maxPrice     Int
    productItems productItem[]

    category  productCategory @relation(fields: [categoryId], references: [id])
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
}

model productItem {
    id                      Int                     @id @default(autoincrement())
    productId               Int
    sku                     String
    minQty                  Int
    ogPrice                 Int
    minPrice                Int
    avgPrice                Int
    maxPrice                Int
    imageUrl                String[]
    isAvailable             Boolean                 @default(false)
    productAttributeOptions productAttributeValue[]
    orders                  order[]

    product   product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model productAttributeValue {
    id                     Int           @id @default(autoincrement())
    productItems           productItem[]
    productAttributeTypeId Int
    productAttributeValue  String

    productAttributeType productAttributeType @relation(fields: [productAttributeTypeId], references: [id], onDelete: Cascade)
    createdAt            DateTime             @default(now())
    updatedAt            DateTime             @updatedAt
}

model productAttributeType {
    id                      Int                     @id @default(autoincrement())
    name                    String
    productAttributeOptions productAttributeValue[]

    productCategoryId Int
    productCategory   productCategory @relation(fields: [productCategoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model order {
    id             Int    @id @default(autoincrement())
    customerId     Int
    productItemId  Int
    qty            Int
    amount         Int
    deliveryCharge Int?
    status         STATUS @default(PENDING)
    process        task[]

    productItem productItem @relation(fields: [productItemId], references: [id])
    customer    customer    @relation(fields: [customerId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model staff {
    id       Int     @id @default(autoincrement())
    name     String
    email    String
    phone    String  @unique
    role     ROLE    @default(STAFF)
    isBanned Boolean @default(false)
    password String
    tasks    task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model task {
    id         Int @id @default(autoincrement())
    taskTypeId Int
    orderId    Int
    staffId    Int

    isCompleted   Boolean  @default(false)
    completedDate DateTime

    order     order    @relation(fields: [orderId], references: [id])
    staff     staff    @relation(fields: [staffId], references: [id], onDelete: Restrict)
    taskType  taskType @relation(fields: [taskTypeId], references: [id], onDelete: Restrict)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model taskType {
    id          Int    @id @default(autoincrement())
    name        String
    description String

    tasks     task[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ROLE {
    ADMIN
    PRODUCT_MANAGER
    ORDER_MANAGER
    ACCOUNTANT
    STAFF
}

enum CUSTOMER_CATEGORY {
    LOW
    MEDIUM
    HIGH
}

enum STATUS {
    PENDING
    PROCESSING
    DISPATCHED
    CANCELLED
}
